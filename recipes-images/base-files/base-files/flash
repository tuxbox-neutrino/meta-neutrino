#!/bin/bash

machine="hd51"
url="https://tuxbox-images.de/images/$machine"
imagename="neutrino-image-$machine.ext4.bz2"
image="neutrino-image_flash.zip"
imagesource="$url/$image"
hdd_mount="/media/HDD"
kernelname="kernel.bin"
devbase="/dev/mmcblk0p"
dev_display="/dev/dbox/oled0"

[ -z $1 ] || [ $1 = "-h" ] || [ $1 = "--help" ] && printf '\n%s\n' "Give the destination partition number [1 - 4] as first argument.

As second argument you can specify the path where the image is stored.
If no second argument is given the image will be downloaded from

$imagesource
" && exit 0;

if [[ $1 =~ ^[0-9]+$ ]]; then
	if  [ $1 -lt 1 ] || [ $1 -gt 4 ]; then
	        printf '\n%s\n' "Choose a valid partition" ; exit 1;
	elif [ $1 = 1 ]; then
	        part=1; kernel=2; root=3
	elif [ $1 = 2 ]; then
	        part=2; kernel=4; root=5
	elif [ $1 = 3 ]; then
	        part=3; kernel=6; root=7
	elif [ $1 = 4 ]; then
	        part=4; kernel=8; root=9
	fi
else
	printf '\n%s\n' "Please give the partition number as first argument" ; exit 1;
fi

rootdevice="$(sed -e 's/^.*root=//' -e 's/ .*$//' < /proc/cmdline)"
partition_sectorsize="$(gdisk -l $devbase$root | grep 'Total free space' | awk '{print $5}')"
[ $partition_sectorsize -ne 1638333 ] && printf '\n%s\n' "The partition scheme is invalid ... use ofgwrite for flashing" && exit 2;

reset

if [ -z $2 ]; then
	imagebase="$hdd_mount/service/image"
	imagedir="$imagebase/$machine"
	imagefile="$imagebase/$image"
	imageversion="$imagedir/imageversion"
	imageversion_local="$imagebase/imageversion_partition_$part"
	imageversion_online="$url/imageversion"
	[ ! -d $imagebase ] && mkdir -p $imagebase
	space_available="$(df -Pk $imagebase | awk 'NR==2 {print $4}')"
	[ $space_available -lt 1048576 ] && printf '\n%s\n' "You need at least 1G of free space on your HDD" && exit 3;
	[ ! -f $imageversion_local ] && touch $imageversion_local
	md5_imageversion_online=$(curl -s $imageversion_online | md5sum | awk '{print $1}')
	md5_imageversion_local=$(md5sum "$imageversion_local" | awk '{print $1}')
	[ $md5_imageversion_online = $md5_imageversion_local ] && printf '\n%s\n' "No update available" && \
	echo "No update available" > $dev_display && exit 4;
	echo "Downloading $image" > $dev_display
	unpack="unzip -x $imagefile -d $imagebase"
	curl $imagesource -o $imagefile || { printf '\n%s\n' "Downloading the image failed" ; exit 5; }
	printf '\n%s\n'
	[ -d $imagedir ] && rm -r $imagedir
	echo "Decompressing $image" > $dev_display
	$unpack || { printf '\n%s\n' "Unpacking the image failed" ; exit 6; }
	cp -rf $imageversion $imageversion_local 
	[ -f $imagefile ] && rm $imagefile
else
	imagedir="$2"
	[ ! -f $imagedir/$imagename ] && printf '\n%s\n' "$imagedir/$imagename not found" && exit 1;
	[ ! -f $imagedir/$kernelname ] && printf '\n%s\n' "$imagedir/$kernelname not found" && exit 1;
	space_available="$(df -Pk $imagedir | awk 'NR==2 {print $4}')"
	[ $space_available -lt 1048576 ] && printf '\n%s\n' "You need at least 1G of free space on your device" && exit 1;
fi

echo "Writing image into partition $part" > $dev_display
[ -f /bin/dd.coreutils ] && have_coreutils="status=progress"

printf '\n%s\n' "Writing kernel into $devbase$kernel"
dd if=$imagedir/$kernelname of=$devbase$kernel bs=1M $have_coreutils conv=fsync \
|| { printf '\n%s\n' "Writing the kernel failed" ; exit 7; }

printf '\n%s\n' "Writing rootfs into $devbase$root"
bzip2 -cd $imagedir/$imagename | dd of=$devbase$root bs=1M $have_coreutils conv=fsync \
|| { printf '\n%s\n' "Writing rootfs into $devbase$root failed" ; exit 8; }
printf '\n%s\n' "Flash successful"

[ $rootdevice = $devbase$root ] && echo "...Reboot" > $dev_display && \
reboot="$(echo 1 > /proc/sys/kernel/sysrq && echo b > /proc/sysrq-trigger)"
echo "Flash succeeded" > $dev_display

